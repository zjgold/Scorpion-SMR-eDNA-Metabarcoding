---
title: "EZ Moâ€™orea Analysis"
author: "Zack Gold"
date: "11/3/2020"
output: html_document
---


```{r}
library(tidyverse)
library(phyloseq)
library(metagMisc)
```

```{r}

ez_eidx <- readRDS("/Users/zackgold/Documents/UCLA_phd/Projects/Moorea/results_110202020/EZ/decontam/Output_R/pre_occupancy_results_sum.taxonomy_tech_reps_separate_eDNA_index.RDS")

ez_reads <- readRDS("/Users/zackgold/Documents/UCLA_phd/Projects/Moorea/results_110202020/EZ/decontam/Output_R/pre_occupancy_results_sum.taxonomy_tech_reps_separate_read_counts.RDS")

metadata <- read.table(file="/Users/zackgold/Documents/UCLA_phd/Projects/Moorea/results_110202020/EZ/11032020_metadata_ez_moorea.txt", header=T)

metadata %>% 
  dplyr::select(-Seq_number) %>% 
  mutate(., Seq_number = str_c("bio_12S_",New_name)) %>% 
  mutate(., Time = str_sub(Bio_rep,-2),
         BIO_rep = str_sub(Bio_rep,1,1)) %>% 
  dplyr::select(Seq_number, Time, Site, BIO_rep) -> metadata

```

```{r anacapa to phyloseq functions from ranacapa library imported manually since they do not work on R3.6.0,  results="hide", warning=FALSE, include=FALSE}
#' Takes a site-abundance table from Anacapa, and summarizes to each unique taxon in the sum.taxonomy column
#' @param taxon_table OTU table from Anacapa
#' @author Gaurav Kandlikar
#' @examples
#' good_taxon_table <- data.frame(sum.taxonomy = c("a;b;c;d;f;u", "p;q;r;s;t;u"),
#' site_1 = c(0,1), site_2 = c(10, 20))
#' group_anacapa_by_taxonomy(good_taxon_table)
#' @export

group_anacapa_by_taxonomy <- function(taxon_table) {
  # If tables were made in New Anacapa (with Domain), get rid of domain...
  if(stringr::str_count(taxon_table$sum.taxonomy, ";")[1] == 2) {
    taxon_table$sum.taxonomy = gsub(pattern = "^.*?;", replacement = "", x = taxon_table$sum.taxonomy)
  }
  taxon_table$sum.taxonomy
  taxon_table %>%
    dplyr::filter(sum.taxonomy != "") %>%
    dplyr::group_by(sum.taxonomy) %>%
    dplyr::summarize_if(is.numeric, sum) %>%
    dplyr::mutate(sum.taxonomy = as.character(sum.taxonomy)) %>%
    data.frame
}


#' Takes an site-abundance table from Anacapa, along with a qiime-style mapping file, and returns a phyloseq object
#' @param taxon_table Taxon table in the anacapa format
#' @param metadata_file Metadata file with rows as sites, columns as variables
#' @return phyloseq class object
#' @author Gaurav Kandlikar
#' @examples
#' good_taxon_table <- data.frame(sum.taxonomy = c("a;b;c;d;f;u", "p;q;r;s;t;u"),
#' site_1 = c(0,1), site_2 = c(10, 20))
#' good_maps <- data.frame(site = c("site_1", "site_2"), season = c("wet", "dry"),
#'  host = c("oak", "sage"))
#' convert_anacapa_to_phyloseq(good_taxon_table, good_maps)
#' @export


convert_anacapa_to_phyloseq <- function(taxon_table, metadata_file) {

  # Validate the files
  validate_input_files(taxon_table, metadata_file)

  # Group the anacapa ouptut by taxonomy, if it has not yet happened, and turn it into a matrix
  taxon_table2 <- group_anacapa_by_taxonomy(taxon_table) %>%
    tibble::column_to_rownames("sum.taxonomy") %>%
    as.matrix
  # Reorder the columns (sites) for ease of displaying later
  taxon_table2 <- taxon_table2[ , order(colnames(taxon_table2))]

  # Convert the matrix into a phyloseq otu_table object, with taxa as the rows
  ana_taxon_table_physeq <- phyloseq::otu_table(taxon_table2, taxa_are_rows = TRUE)

  # Extract the rownames of the matrix above- this has the full taxonomic path.
  # Split the taxonomic path on semicolons, and turn the resulting matrix into
  # a phyloseq tax_table object
  taxon_names <- reshape2::colsplit(rownames(taxon_table2), ";",
                          names = c("Domain","Phylum","Class","Order","Family","Genus","Species")) %>%
    as.matrix
  rownames(taxon_names) <- rownames(taxon_table2)

  tax_physeq <- phyloseq::tax_table(taxon_names)
  colnames(tax_physeq) <- c("Domain","Phylum","Class","Order","Family","Genus","Species")

  # Make a phyloseq object out of the otu_table and the tax_table objects
  physeq_object <- phyloseq::phyloseq(ana_taxon_table_physeq, tax_physeq)

  # Make sure the mapping file (ie the site metadata) is ordered according to site name
  rownames(metadata_file) <- metadata_file[, 1]
  metadata_file <- metadata_file[order(metadata_file[, 1]), ]

  # Convert the mapping file into a phyloseq sample_data object, and merge it with the
  # phyloseq object created above to make a phyloseq object with otu table, tax table, and sample data.
  sampledata <- phyloseq::sample_data(metadata_file)
  sample_names(sampledata)
  sample_names(physeq_object)
  phyloseq::merge_phyloseq(physeq_object, sampledata)
}

#' Takes a phyloseq object with an otu_table object and returns a vegan style community matrix.
#' @param physeq_object phyloseq object with an otu_table object within
#' @return vegan-style community matrix
#' @examples
#' good_taxon_table <- data.frame(sum.taxonomy = c("a;b;c;d;f;u", "p;q;r;s;t;u"),
#' site_1 = c(0,1), site_2 = c(10, 20))
#' good_maps <- data.frame(site = c("site_1", "site_2"), season = c("wet", "dry"),
#' host = c("oak", "sage"))
#' physeq_object <- convert_anacapa_to_phyloseq(good_taxon_table, good_maps)
#' vegan_otu(physeq_object)
#' @export
vegan_otu <- function(physeq_object) {
  OTU <- phyloseq::otu_table(physeq_object)
  if (phyloseq::taxa_are_rows(OTU)) {
    OTU <- t(OTU)
  }
  return(methods::as(OTU, "matrix"))
}

#' Remove "xxx_seq_number" column from ana_taxon_table file if it exists
#' takes one taxon table as its input, and if it include
#' a column named "xxx_seq_number", it gets rid of that column - it's not of use to us
#' any longer
#'
#' @param taxon_table taxonomy table from Anacapa
#' @return ana_taxon_table file, with "xxx_seq_number" column removed (if it existed)
#' @examples
#' good_taxon_table <- data.frame(seq_number = c(1,2),
#' sum.taxonomy = c("a;b;c;d;f;u", "p;q;r;s;t;u"),
#' site_1 = c(0,1), site_2 = c(10, 20))
#' scrub_seqNum_column(good_taxon_table)
#' @export
scrub_seqNum_column <- function(taxon_table) {
  to_return <- taxon_table %>% dplyr::select(-dplyr::matches("seq_number"))
  return(to_return)
}

#' Replace empty calls in Anacapa taxonomy tables with Unknown
#' (that is what they effectively are to most users)
#' @param taxon_table taxonomy table from Anacapa
#' @return ana_taxon_table with scrubbed 'sum.taxonomy' column
#' @examples
#' good_taxon_table <- data.frame(sum.taxonomy = c("a;b;c;d;f;u", "p;q;r;s;t;u"),
#' site_1 = c(0,1), site_2 = c(10, 20))
#' scrub_taxon_paths(good_taxon_table)
#' @export
scrub_taxon_paths <- function(taxon_table) {
  to_return <- taxon_table
  new_sum_tax <- reshape2::colsplit(taxon_table$sum.taxonomy, ";",
                          names = c("Domain","Phylum", "Class", "Order", "Family", "Genus", "Species"))

  new_sum_tax <- new_sum_tax %>%
    dplyr::mutate(Domain = ifelse(is.na(Domain) | Domain == "", "unknown", Domain))
    dplyr::mutate(Phylum = ifelse(is.na(Phylum) | Phylum == "", "unknown", Phylum)) %>%
    dplyr::mutate(Class = ifelse(is.na(Class) | Class == "", "unknown", Class)) %>%
    dplyr::mutate(Order = ifelse(is.na(Order) | Order == "", "unknown", Order)) %>%
    dplyr::mutate(Family = ifelse(is.na(Family) | Family == "", "unknown", Family)) %>%
    dplyr::mutate(Genus = ifelse(is.na(Genus) | Genus == "", "unknown", Genus)) %>%
    dplyr::mutate(Species = ifelse(is.na(Species)| Species == "", "unknown", Species))

  new_sum_tax2 <- paste(new_sum_tax$Domain,
    new_sum_tax$Phylum,
                        new_sum_tax$Class,
                        new_sum_tax$Order,
                        new_sum_tax$Family,
                        new_sum_tax$Genus,
                        new_sum_tax$Species, sep = ";")
  to_return$sum.taxonomy <- new_sum_tax2
  return(to_return)
}

#' Verify that the input taxon_table file and the input mapping file meets specificationss
#' The function takes one taxon table as its input, and verfies that it meets
#' the expected standards.
#' The standards incude:
#' 1. Column names exist.
#' 2. One of the columns is named "sum.taxonomy"
#' 3. The "xxx_seq_number" column, if it ever existed, is removed
#' 4. All columns apart from sum.taxonomy should be numeric
#' 5. All columns apart from sum.taxonomy should have corresponding row in metadata file
#' @param taxon_table taxonomy table from Anacapa
#' @param metadata_file Qiime-style mapping
#' @examples
#' good_taxon_table <- data.frame(sum.taxonomy = c("a;b;c;d;f;u", "p;q;r;s;t;u"),
#' site_1 = c(0,1), site_2 = c(10, 20))
#' good_maps <- data.frame(site = c("site_1", "site_2"),
#' season = c("wet", "dry"), host = c("oak", "sage"))
#' validate_input_files(good_taxon_table, good_maps)
#' @export
validate_input_files <- function(taxon_table, metadata_file) {
  # 1. Column names exist.
  if (is.null(colnames(taxon_table))) {
    stop("The input taxon table should have column names. The taxonomy column should be named 'sum.taxonomy'; the rest of the columns should be named according to their sample names.")
  }

  # 2. One of the columns is named "sum.taxonomy"
  if (!("sum.taxonomy" %in% colnames(taxon_table))) {
    stop("Please make sure that the taxonomy column in the input taxon table is named 'sum.taxonomy'!")
  }

  # 3. The "xxx_seq_number" column, if it ever existed, is removed
  if (any(stringr::str_detect(colnames(taxon_table), "seq_number"))) {
    stop("Please makes sure that you have removed the 'xxx_seq_number' column from the taxon table (note: this can be done with the function `scrub_seqNum_column`)")
  }

  # 4. All columns apart from sum.taxonomy should be numeric
  if (!(all(sapply(taxon_table %>% ungroup() %>%  dplyr::select(-sum.taxonomy), is.numeric)))) {
    stop("Please make sure that all columns apart from sum.taxonomy only contain numeric data!")
  }

  # 5. All columns apart from sum.taxonomy should have corresponding row in metadata file
 # if (!(all(colnames(taxon_table %>% dplyr::select(-sum.taxonomy)) %in% metadata_file[, 1]))) {
  #  stop("Please make sure that each sample in your taxon table has a corresponding row in the mapping file!")
  #}


}

```

```{r}
#Create phyloseq object
ez_reads


physeq_obj.step3_eIDX <- convert_anacapa_to_phyloseq(ez_eidx, metadata)
physeq_obj.step3_counts <- convert_anacapa_to_phyloseq(ez_reads, metadata)


```


```{r}
ez_reads %>% 
  pivot_longer(., values_to = "nReads", names_to ="Seq_number", cols=`bio_12S_Blue_half_mix_cd_2`:`bio_12S_Yellow_Cymodocea_only_initial_4`) %>% 
  left_join(metadata) %>% 
  filter(., !is.na(Time)) %>% 
  separate(sum.taxonomy, into =c("Domain","Phylum","Class","Order","Family","Genus","Species"), sep=";") %>% 
  group_by(Class, Time, Site, BIO_rep) %>% 
  dplyr::summarise(class_reads = sum(nReads)) %>% 
  unite(., "sample",`Time`:`BIO_rep`, remove=FALSE)-> read_class

read_class %>% 
  ungroup() %>% 
  group_by(Time, Site, BIO_rep) %>%
  dplyr::summarise( tot_reads = sum(class_reads)) %>% 
  unite(., "sample",`Time`:`BIO_rep`, remove=FALSE)-> tot_reads

read_class %>% 
  filter(., Time != "_L") -> read_class

read_class$Time <- as.numeric(read_class$Time)

read_class %>% 
  left_join(tot_reads, by=c("sample")) %>% 
  mutate(., Read_prop = class_reads/tot_reads) %>% 
  ggplot(., aes(x=Time.x, y= Read_prop, group = Class, color=Class)) + geom_point()
```


```{r}
ez_reads %>% 
  pivot_longer(., values_to = "nReads", names_to ="Seq_number", cols=`bio_12S_Blue_half_mix_cd_2`:`bio_12S_Yellow_Cymodocea_only_initial_4`) %>% 
  left_join(metadata) %>% 
  filter(., !is.na(Time)) %>%  filter(., Time > 60) %>%  View()
```
