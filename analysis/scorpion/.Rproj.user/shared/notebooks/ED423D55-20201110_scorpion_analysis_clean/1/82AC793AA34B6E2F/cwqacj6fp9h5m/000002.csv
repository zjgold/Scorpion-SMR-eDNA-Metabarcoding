"0","#' Takes a site-abundance table from Anacapa, and summarizes to each unique taxon in the sum.taxonomy column"
"0","#' @param taxon_table OTU table from Anacapa"
"0","#' @author Gaurav Kandlikar"
"0","#' @examples"
"0","#' good_taxon_table <- data.frame(sum.taxonomy = c(""a;b;c;d;f;u"", ""p;q;r;s;t;u""),"
"0","#' site_1 = c(0,1), site_2 = c(10, 20))"
"0","#' group_anacapa_by_taxonomy(good_taxon_table)"
"0","#' @export"
"0","group_anacapa_by_taxonomy <- function(taxon_table) {"
"0","  # If tables were made in New Anacapa (with Domain), get rid of domain..."
"0","  if(stringr::str_count(taxon_table$sum.taxonomy, "";"")[1] == 7) {"
"0","    taxon_table$sum.taxonomy = gsub(pattern = ""^.*?;"", replacement = """", x = taxon_table$sum.taxonomy)"
"0","  }"
"0","  taxon_table %>%"
"0","    dplyr::filter(sum.taxonomy != """") %>%"
"0","    dplyr::group_by(sum.taxonomy) %>%"
"0","    dplyr::summarize_if(is.numeric, sum) %>%"
"0","    dplyr::mutate(sum.taxonomy = as.character(sum.taxonomy)) %>%"
"0","    data.frame"
"0","}"
"0","#' Takes an site-abundance table from Anacapa, along with a qiime-style mapping file, and returns a phyloseq object"
"0","#' @param taxon_table Taxon table in the anacapa format"
"0","#' @param metadata_file Metadata file with rows as sites, columns as variables"
"0","#' @return phyloseq class object"
"0","#' @author Gaurav Kandlikar"
"0","#' @examples"
"0","#' good_taxon_table <- data.frame(sum.taxonomy = c(""a;b;c;d;f;u"", ""p;q;r;s;t;u""),"
"0","#' site_1 = c(0,1), site_2 = c(10, 20))"
"0","#' good_maps <- data.frame(site = c(""site_1"", ""site_2""), season = c(""wet"", ""dry""),"
"0","#'  host = c(""oak"", ""sage""))"
"0","#' convert_anacapa_to_phyloseq(good_taxon_table, good_maps)"
"0","#' @export"
"0","convert_anacapa_to_phyloseq <- function(taxon_table, metadata_file) {"
"0","  # Validate the files"
"0","  validate_input_files(taxon_table, metadata_file)"
"0","  # Group the anacapa ouptut by taxonomy, if it has not yet happened, and turn it into a matrix"
"0","  taxon_table2 <- group_anacapa_by_taxonomy(taxon_table) %>%"
"0","    tibble::column_to_rownames(""sum.taxonomy"") %>%"
"0","    as.matrix"
"0","  # Reorder the columns (sites) for ease of displaying later"
"0","  taxon_table2 <- taxon_table2[ , order(colnames(taxon_table2))]"
"0","  # Convert the matrix into a phyloseq otu_table object, with taxa as the rows"
"0","  ana_taxon_table_physeq <- phyloseq::otu_table(taxon_table2, taxa_are_rows = TRUE)"
"0","  # Extract the rownames of the matrix above- this has the full taxonomic path."
"0","  # Split the taxonomic path on semicolons, and turn the resulting matrix into"
"0","  # a phyloseq tax_table object"
"0","  taxon_names <- reshape2::colsplit(rownames(taxon_table2), "";"","
"0","                          names = c(""Domain"",""Phylum"",""Class"",""Order"",""Family"",""Genus"",""Species"")) %>%"
"0","    as.matrix"
"0","  rownames(taxon_names) <- rownames(taxon_table2)"
"0","  tax_physeq <- phyloseq::tax_table(taxon_names)"
"0","  colnames(tax_physeq) <- c(""Domain"",""Phylum"",""Class"",""Order"",""Family"",""Genus"",""Species"")"
"0","  # Make a phyloseq object out of the otu_table and the tax_table objects"
"0","  physeq_object <- phyloseq::phyloseq(ana_taxon_table_physeq, tax_physeq)"
"0","    # Make sure the mapping file (ie the site metadata) is ordered according to site name"
"0","  rownames(metadata_file) <- metadata_file[, 1]"
"0","  metadata_file <- metadata_file[order(metadata_file[, 1]), ]"
"0","  # Convert the mapping file into a phyloseq sample_data object, and merge it with the"
"0","  # phyloseq object created above to make a phyloseq object with otu table, tax table, and sample data."
"0","  sampledata <- phyloseq::sample_data(metadata_file)"
"0","  phyloseq::merge_phyloseq(physeq_object, sampledata)"
"0","}"
"0","#' Takes a phyloseq object with an otu_table object and returns a vegan style community matrix."
"0","#' @param physeq_object phyloseq object with an otu_table object within"
"0","#' @return vegan-style community matrix"
"0","#' @examples"
"0","#' good_taxon_table <- data.frame(sum.taxonomy = c(""a;b;c;d;f;u"", ""p;q;r;s;t;u""),"
"0","#' site_1 = c(0,1), site_2 = c(10, 20))"
"0","#' good_maps <- data.frame(site = c(""site_1"", ""site_2""), season = c(""wet"", ""dry""),"
"0","#' host = c(""oak"", ""sage""))"
"0","#' physeq_object <- convert_anacapa_to_phyloseq(good_taxon_table, good_maps)"
"0","#' vegan_otu(physeq_object)"
"0","#' @export"
"0","vegan_otu <- function(physeq_object) {"
"0","  OTU <- phyloseq::otu_table(physeq_object)"
"0","  if (phyloseq::taxa_are_rows(OTU)) {"
"0","    OTU <- t(OTU)"
"0","  }"
"0","  return(methods::as(OTU, ""matrix""))"
"0","}"
"0","#' Remove ""xxx_seq_number"" column from ana_taxon_table file if it exists"
"0","#' takes one taxon table as its input, and if it include"
"0","#' a column named ""xxx_seq_number"", it gets rid of that column - it's not of use to us"
"0","#' any longer"
"0","#'"
"0","#' @param taxon_table taxonomy table from Anacapa"
"0","#' @return ana_taxon_table file, with ""xxx_seq_number"" column removed (if it existed)"
"0","#' @examples"
"0","#' good_taxon_table <- data.frame(seq_number = c(1,2),"
"0","#' sum.taxonomy = c(""a;b;c;d;f;u"", ""p;q;r;s;t;u""),"
"0","#' site_1 = c(0,1), site_2 = c(10, 20))"
"0","#' scrub_seqNum_column(good_taxon_table)"
"0","#' @export"
"0","scrub_seqNum_column <- function(taxon_table) {"
"0","  to_return <- taxon_table %>% dplyr::select(-dplyr::matches(""seq_number""))"
"0","  return(to_return)"
"0","}"
"0","#' Replace empty calls in Anacapa taxonomy tables with Unknown"
"0","#' (that is what they effectively are to most users)"
"0","#' @param taxon_table taxonomy table from Anacapa"
"0","#' @return ana_taxon_table with scrubbed 'sum.taxonomy' column"
"0","#' @examples"
"0","#' good_taxon_table <- data.frame(sum.taxonomy = c(""a;b;c;d;f;u"", ""p;q;r;s;t;u""),"
"0","#' site_1 = c(0,1), site_2 = c(10, 20))"
"0","#' scrub_taxon_paths(good_taxon_table)"
"0","#' @export"
"0","scrub_taxon_paths <- function(taxon_table) {"
"0","  to_return <- taxon_table"
"0","  new_sum_tax <- reshape2::colsplit(taxon_table$sum.taxonomy, "";"","
"0","                          names = c(""Domain"",""Phylum"", ""Class"", ""Order"", ""Family"", ""Genus"", ""Species""))"
"0","  new_sum_tax <- new_sum_tax %>%"
"0","    dplyr::mutate(Domain = ifelse(is.na(Domain) | Domain == """", ""unknown"", Domain)) %>%"
"0","    dplyr::mutate(Phylum = ifelse(is.na(Phylum) | Phylum == """", ""unknown"", Phylum)) %>%"
"0","    dplyr::mutate(Class = ifelse(is.na(Class) | Class == """", ""unknown"", Class)) %>%"
"0","    dplyr::mutate(Order = ifelse(is.na(Order) | Order == """", ""unknown"", Order)) %>%"
"0","    dplyr::mutate(Family = ifelse(is.na(Family) | Family == """", ""unknown"", Family)) %>%"
"0","    dplyr::mutate(Genus = ifelse(is.na(Genus) | Genus == """", ""unknown"", Genus)) %>%"
"0","    dplyr::mutate(Species = ifelse(is.na(Species)| Species == """", ""unknown"", Species))"
"0","  new_sum_tax2 <- paste(new_sum_tax$Domain,"
"0","                        new_sum_tax$Phylum,"
"0","                        new_sum_tax$Class,"
"0","                        new_sum_tax$Order,"
"0","                        new_sum_tax$Family,"
"0","                        new_sum_tax$Genus,"
"0","                        new_sum_tax$Species, sep = "";"")"
"0","  to_return$sum.taxonomy <- new_sum_tax2"
"0","  return(to_return)"
"0","}"
"0","#' Verify that the input taxon_table file and the input mapping file meets specificationss"
"0","#' The function takes one taxon table as its input, and verfies that it meets"
"0","#' the expected standards."
"0","#' The standards incude:"
"0","#' 1. Column names exist."
"0","#' 2. One of the columns is named ""sum.taxonomy"""
"0","#' 3. The ""xxx_seq_number"" column, if it ever existed, is removed"
"0","#' 4. All columns apart from sum.taxonomy should be numeric"
"0","#' 5. All columns apart from sum.taxonomy should have corresponding row in metadata file"
"0","#' @param taxon_table taxonomy table from Anacapa"
"0","#' @param metadata_file Qiime-style mapping"
"0","#' @examples"
"0","#' good_taxon_table <- data.frame(sum.taxonomy = c(""a;b;c;d;f;u"", ""p;q;r;s;t;u""),"
"0","#' site_1 = c(0,1), site_2 = c(10, 20))"
"0","#' good_maps <- data.frame(site = c(""site_1"", ""site_2""),"
"0","#' season = c(""wet"", ""dry""), host = c(""oak"", ""sage""))"
"0","#' validate_input_files(good_taxon_table, good_maps)"
"0","#' @export"
"0","validate_input_files <- function(taxon_table, metadata_file) {"
"0","  # 1. Column names exist."
"0","  if (is.null(colnames(taxon_table))) {"
"0","    stop(""The input taxon table should have column names. The taxonomy column should be named 'sum.taxonomy'; the rest of the columns should be named according to their sample names."")"
"0","  }"
"0","  # 2. One of the columns is named ""sum.taxonomy"""
"0","  if (!(""sum.taxonomy"" %in% colnames(taxon_table))) {"
"0","    stop(""Please make sure that the taxonomy column in the input taxon table is named 'sum.taxonomy'!"")"
"0","  }"
"0","  # 3. The ""xxx_seq_number"" column, if it ever existed, is removed"
"0","  if (any(stringr::str_detect(colnames(taxon_table), ""seq_number""))) {"
"0","    stop(""Please makes sure that you have removed the 'xxx_seq_number' column from the taxon table (note: this can be done with the function `scrub_seqNum_column`)"")"
"0","  }"
"0","  # 4. All columns apart from sum.taxonomy should be numeric"
"0","  if (!(all(sapply(taxon_table %>% dplyr::select(-sum.taxonomy), is.numeric)))) {"
"0","    stop(""Please make sure that all columns apart from sum.taxonomy only contain numeric data!"")"
"0","  }"
"0","  # 5. All columns apart from sum.taxonomy should have corresponding row in metadata file"
"0","  if (!(all(colnames(taxon_table %>% dplyr::select(-sum.taxonomy)) %in% metadata_file[, 1]))) {"
"0","    stop(""Please make sure that each sample in your taxon table has a corresponding row in the mapping file!"")"
"0","  }"
"0","}"
