"0","sink(here(""decontam"",""Stan_SOM_hierarchical.stan""))"
"0","cat("
"0","  ""data{/////////////////////////////////////////////////////////////////////"
"0","  int<lower=1> S;    // number of samples (nrow)"
"0","  int<lower=1> Species[S];    // index of species, each of which will have a different value for p11 and p10"
"0","  int<lower=1> Nspecies;    // number of species, each of which will have a different value for p11 and p10"
"0","  int<lower=1> L[S];   // index of locations or species/site combinations, each of which will have a different value psi"
"0","  int<lower=1> Nloc;   // number of locations or species/site combinations, each of which will have a different value psi"
"0","  int<lower=1> K[S];   // number of replicates per site (ncol)"
"0","  int<lower=0> N[S]; // number of detections among these replicates"
"0","  int z[S];   // integer flag to help estimate psi parameter"
"0","  }"
"0","  parameters{/////////////////////////////////////////////////////////////////////"
"0","  real<lower=0,upper=1> psi[Nloc];  //commonness parameter"
"0","  real<lower=0,upper=1> p11[Nspecies]; //true positive detection rate"
"0","  real<lower=0,upper=1> p10[Nspecies]; //false positive detection rate"
"0","  }"
"0","  transformed parameters{/////////////////////////////////////////////////////////////////////"
"0","  }"
"0","  model{/////////////////////////////////////////////////////////////////////"
"0","  real p[S];"
"0","  "
"0","  for (i in 1:S){"
"0","  z[i] ~ bernoulli(psi[L[i]]);"
"0","  p[i] = z[i]*p11[Species[i]] + (1-z[i])*p10[Species[i]];"
"0","  N[i] ~ binomial(K[i], p[i]);"
"0","  }; "
"0","  "
"0","  //priors"
"0","  psi ~ beta(2,2); "
"0","  p11 ~ beta(2,2); "
"0","  p10 ~ beta(1,10);"
"0","  }"
"0","  generated quantities{"
"0","  real<lower=0,upper=1> Occupancy_prob[S];    //after inferring parameters above, now calculate occupancy probability for each observation. Equation from Lahoz-Monfort et al. 2015"
"0","  "
"0","  for (i in 1:S){"
"0","  Occupancy_prob[i]  = (psi[L[i]]*(p11[Species[i]]^N[i])*(1-p11[Species[i]])^(K[i]-N[i])) "
"0","  / ((psi[L[i]]*(p11[Species[i]]^N[i])*(1-p11[Species[i]])^(K[i]-N[i])) "
"0","  + (((1-psi[L[i]])*(p10[Species[i]]^N[i]))*((1-p10[Species[i]])^(K[i]-N[i])))"
"0","  );"
"0","  }"
"0","  }"
"0","  "
"0","  "","
"0","  fill=TRUE)"
"0","sink()"
