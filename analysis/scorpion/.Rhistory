"Potatoe_Pasture_A"="MPA_A",
"Potatoe_Pasture_B"="MPA_B",
"Potatoe_Pasture_C"="MPA_C")) %>%
mutate(Site=dplyr::recode(Site, "Little_Scorpion"="Edge","Pedro_Reef"="Outside","Potatoe_Pasture"="MPA")) -> data_cap
cap_species <-  data_cap %>%
ggplot(aes(x=CAP1, y=CAP2)) + geom_point(aes(col=Location, shape=Site), size =3) + scale_color_manual(values = c(col.great3), labels=c("Edge_A", "Edge_B", "Edge_C","MPA_A", "MPA_B", "MPA_C","Outside_A","Outside_B","Outside_C")) + geom_segment(
mapping = arrow_map,
size = .5,
data = arrowdf,
color = "grey",
arrow = arrowhead
) +
geom_text(
mapping = label_map,
size = 5,
data = arrowdf,
show.legend = FALSE,
position=position_jitter(width=0.05,height=0.08)
) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(),
panel.background = element_blank(),  panel.border = element_rect(colour = "black", fill=NA, size=2))+
scale_fill_manual(name  ="Location",
labels=c("Edge_A", "Edge_B", "Edge_C","MPA_A", "MPA_B", "MPA_C","Outside_A","Outside_B","Outside_C"),
breaks=c("Edge_A", "Edge_B", "Edge_C","MPA_A", "MPA_B", "MPA_C","Outside_A","Outside_B","Outside_C"),
values = c(col.great3))+
geom_polygon(data=hull.data,aes(x=CAP1,y=CAP2,fill=grp, group=grp),alpha=0.30) +
scale_fill_manual(name  ="Location",
breaks=c("Edge_A", "Edge_B", "Edge_C","MPA_A", "MPA_B", "MPA_C","Outside_A","Outside_B","Outside_C"),
labels=c("Edge_A", "Edge_B", "Edge_C","MPA_A", "MPA_B", "MPA_C","Outside_A","Outside_B","Outside_C"),
values = c(col.great3)) + ylab("CAP2 [8.8%]")   + xlab("CAP1 [20.9%]") +theme(plot.title = element_text(hjust = 0.5,size = 30, face = "bold"),
axis.text=element_text(size=20),
axis.title=element_text(size=24,face="bold"),
legend.title=element_text(size=20),
legend.text=element_text(size=18),
plot.subtitle = element_text(size=20),
legend.spacing.y = unit(0.5, 'cm'),
legend.key = element_rect(size = 10),
legend.key.size = unit(2, 'lines'))
cap_species
ggsave(filename = here("analysis","Figures","Fig5.eps"),
plot = plot(cap_species),
device = cairo_ps,
dpi = 300,
width = 12,
height = 8,
units = c("in"))
library(phyloseq)
library(wesanderson)
library(tidyverse)
library(vegan)
library(iNEXT)
library(Cairo)
library(multcomp)
library(multcompView)
library(treemapify)
library(brew)
library(RColorBrewer)
library(car)
library(VennDiagram)
library(here)
library(MASS)
library(scales)
library(gridExtra)
library(segmented)
library(knitr)
library(ranacapa)
post_occ_index <- readRDS(file=here("decontam","Output_R","post_occupancy_results_sum.taxonomy_tech_reps_summed_eDNA_index.RDS"))
colnames(post_occ_index) %>% str_replace_all(., "-",".") -> post_occ_index_names
colnames(post_occ_index) <-post_occ_index_names
post_occ_counts <- readRDS(file=here("decontam","Output_R","post_occupancy_results_sum.taxonomy_tech_reps_summed_read_counts.RDS"))
colnames(post_occ_counts) %>% str_replace_all(., "-",".") ->post_occ_counts_names
colnames(post_occ_counts) <-post_occ_counts_names
pre_index <- readRDS(file=here("decontam","Output_R","pre_occupancy_results_sum.taxonomy_tech_reps_summed_eDNA_index.RDS"))
colnames(pre_index) %>% str_replace_all(., "-",".") -> pre_index_names
colnames(pre_index) <-pre_index_names
pre_counts <- readRDS(file=here("decontam","Output_R","pre_occupancy_results_sum.taxonomy_tech_reps_summed_read_counts.RDS"))
colnames(pre_counts) %>% str_replace_all(., "-",".") -> pre_counts_names
colnames(pre_counts) <-pre_counts_names
ASV.nested.mpa <- readRDS(file=here("decontam","ASV.nested_final.RDS"))
#Metadata
input_meta_path <- "data/mpa_metadata_02042020.txt"
metadata <- read.table(here(input_meta_path), header = 1, sep = "\t", stringsAsFactors = F)
metadata %>%
dplyr::select(-Seq_number) %>%
rename(Seq_number=New_name) %>%
mutate(., Seq_number= str_replace_all(Seq_number, "-","."))-> metadata
#Create list of Taylor and MPA Samples
metadata %>%
filter(Site=="Taylor") %>%
dplyr::select(Seq_number) -> Taylor_samples
Taylor_samples <-  Taylor_samples$Seq_number
#' Takes a site-abundance table from Anacapa, and summarizes to each unique taxon in the sum.taxonomy column
#' @param taxon_table OTU table from Anacapa
#' @author Gaurav Kandlikar
#' @examples
#' good_taxon_table <- data.frame(sum.taxonomy = c("a;b;c;d;f;u", "p;q;r;s;t;u"),
#' site_1 = c(0,1), site_2 = c(10, 20))
#' group_anacapa_by_taxonomy(good_taxon_table)
#' @export
group_anacapa_by_taxonomy <- function(taxon_table) {
# If tables were made in New Anacapa (with Domain), get rid of domain...
if(stringr::str_count(taxon_table$sum.taxonomy, ";")[1] == 7) {
taxon_table$sum.taxonomy = gsub(pattern = "^.*?;", replacement = "", x = taxon_table$sum.taxonomy)
}
taxon_table %>%
dplyr::filter(sum.taxonomy != "") %>%
dplyr::group_by(sum.taxonomy) %>%
dplyr::summarize_if(is.numeric, sum) %>%
dplyr::mutate(sum.taxonomy = as.character(sum.taxonomy)) %>%
data.frame
}
#' Takes an site-abundance table from Anacapa, along with a qiime-style mapping file, and returns a phyloseq object
#' @param taxon_table Taxon table in the anacapa format
#' @param metadata_file Metadata file with rows as sites, columns as variables
#' @return phyloseq class object
#' @author Gaurav Kandlikar
#' @examples
#' good_taxon_table <- data.frame(sum.taxonomy = c("a;b;c;d;f;u", "p;q;r;s;t;u"),
#' site_1 = c(0,1), site_2 = c(10, 20))
#' good_maps <- data.frame(site = c("site_1", "site_2"), season = c("wet", "dry"),
#'  host = c("oak", "sage"))
#' convert_anacapa_to_phyloseq(good_taxon_table, good_maps)
#' @export
convert_anacapa_to_phyloseq <- function(taxon_table, metadata_file) {
# Validate the files
validate_input_files(taxon_table, metadata_file)
# Group the anacapa ouptut by taxonomy, if it has not yet happened, and turn it into a matrix
taxon_table2 <- group_anacapa_by_taxonomy(taxon_table) %>%
tibble::column_to_rownames("sum.taxonomy") %>%
as.matrix
# Reorder the columns (sites) for ease of displaying later
taxon_table2 <- taxon_table2[ , order(colnames(taxon_table2))]
# Convert the matrix into a phyloseq otu_table object, with taxa as the rows
ana_taxon_table_physeq <- phyloseq::otu_table(taxon_table2, taxa_are_rows = TRUE)
# Extract the rownames of the matrix above- this has the full taxonomic path.
# Split the taxonomic path on semicolons, and turn the resulting matrix into
# a phyloseq tax_table object
taxon_names <- reshape2::colsplit(rownames(taxon_table2), ";",
names = c("Domain","Phylum","Class","Order","Family","Genus","Species")) %>%
as.matrix
rownames(taxon_names) <- rownames(taxon_table2)
tax_physeq <- phyloseq::tax_table(taxon_names)
colnames(tax_physeq) <- c("Domain","Phylum","Class","Order","Family","Genus","Species")
# Make a phyloseq object out of the otu_table and the tax_table objects
physeq_object <- phyloseq::phyloseq(ana_taxon_table_physeq, tax_physeq)
# Make sure the mapping file (ie the site metadata) is ordered according to site name
rownames(metadata_file) <- metadata_file[, 1]
metadata_file <- metadata_file[order(metadata_file[, 1]), ]
# Convert the mapping file into a phyloseq sample_data object, and merge it with the
# phyloseq object created above to make a phyloseq object with otu table, tax table, and sample data.
sampledata <- phyloseq::sample_data(metadata_file)
phyloseq::merge_phyloseq(physeq_object, sampledata)
}
#' Takes a phyloseq object with an otu_table object and returns a vegan style community matrix.
#' @param physeq_object phyloseq object with an otu_table object within
#' @return vegan-style community matrix
#' @examples
#' good_taxon_table <- data.frame(sum.taxonomy = c("a;b;c;d;f;u", "p;q;r;s;t;u"),
#' site_1 = c(0,1), site_2 = c(10, 20))
#' good_maps <- data.frame(site = c("site_1", "site_2"), season = c("wet", "dry"),
#' host = c("oak", "sage"))
#' physeq_object <- convert_anacapa_to_phyloseq(good_taxon_table, good_maps)
#' vegan_otu(physeq_object)
#' @export
vegan_otu <- function(physeq_object) {
OTU <- phyloseq::otu_table(physeq_object)
if (phyloseq::taxa_are_rows(OTU)) {
OTU <- t(OTU)
}
return(methods::as(OTU, "matrix"))
}
#' Remove "xxx_seq_number" column from ana_taxon_table file if it exists
#' takes one taxon table as its input, and if it include
#' a column named "xxx_seq_number", it gets rid of that column - it's not of use to us
#' any longer
#'
#' @param taxon_table taxonomy table from Anacapa
#' @return ana_taxon_table file, with "xxx_seq_number" column removed (if it existed)
#' @examples
#' good_taxon_table <- data.frame(seq_number = c(1,2),
#' sum.taxonomy = c("a;b;c;d;f;u", "p;q;r;s;t;u"),
#' site_1 = c(0,1), site_2 = c(10, 20))
#' scrub_seqNum_column(good_taxon_table)
#' @export
scrub_seqNum_column <- function(taxon_table) {
to_return <- taxon_table %>% dplyr::select(-dplyr::matches("seq_number"))
return(to_return)
}
#' Replace empty calls in Anacapa taxonomy tables with Unknown
#' (that is what they effectively are to most users)
#' @param taxon_table taxonomy table from Anacapa
#' @return ana_taxon_table with scrubbed 'sum.taxonomy' column
#' @examples
#' good_taxon_table <- data.frame(sum.taxonomy = c("a;b;c;d;f;u", "p;q;r;s;t;u"),
#' site_1 = c(0,1), site_2 = c(10, 20))
#' scrub_taxon_paths(good_taxon_table)
#' @export
scrub_taxon_paths <- function(taxon_table) {
to_return <- taxon_table
new_sum_tax <- reshape2::colsplit(taxon_table$sum.taxonomy, ";",
names = c("Domain","Phylum", "Class", "Order", "Family", "Genus", "Species"))
new_sum_tax <- new_sum_tax %>%
dplyr::mutate(Domain = ifelse(is.na(Domain) | Domain == "", "unknown", Domain)) %>%
dplyr::mutate(Phylum = ifelse(is.na(Phylum) | Phylum == "", "unknown", Phylum)) %>%
dplyr::mutate(Class = ifelse(is.na(Class) | Class == "", "unknown", Class)) %>%
dplyr::mutate(Order = ifelse(is.na(Order) | Order == "", "unknown", Order)) %>%
dplyr::mutate(Family = ifelse(is.na(Family) | Family == "", "unknown", Family)) %>%
dplyr::mutate(Genus = ifelse(is.na(Genus) | Genus == "", "unknown", Genus)) %>%
dplyr::mutate(Species = ifelse(is.na(Species)| Species == "", "unknown", Species))
new_sum_tax2 <- paste(new_sum_tax$Domain,
new_sum_tax$Phylum,
new_sum_tax$Class,
new_sum_tax$Order,
new_sum_tax$Family,
new_sum_tax$Genus,
new_sum_tax$Species, sep = ";")
to_return$sum.taxonomy <- new_sum_tax2
return(to_return)
}
#' Verify that the input taxon_table file and the input mapping file meets specificationss
#' The function takes one taxon table as its input, and verfies that it meets
#' the expected standards.
#' The standards incude:
#' 1. Column names exist.
#' 2. One of the columns is named "sum.taxonomy"
#' 3. The "xxx_seq_number" column, if it ever existed, is removed
#' 4. All columns apart from sum.taxonomy should be numeric
#' 5. All columns apart from sum.taxonomy should have corresponding row in metadata file
#' @param taxon_table taxonomy table from Anacapa
#' @param metadata_file Qiime-style mapping
#' @examples
#' good_taxon_table <- data.frame(sum.taxonomy = c("a;b;c;d;f;u", "p;q;r;s;t;u"),
#' site_1 = c(0,1), site_2 = c(10, 20))
#' good_maps <- data.frame(site = c("site_1", "site_2"),
#' season = c("wet", "dry"), host = c("oak", "sage"))
#' validate_input_files(good_taxon_table, good_maps)
#' @export
validate_input_files <- function(taxon_table, metadata_file) {
# 1. Column names exist.
if (is.null(colnames(taxon_table))) {
stop("The input taxon table should have column names. The taxonomy column should be named 'sum.taxonomy'; the rest of the columns should be named according to their sample names.")
}
# 2. One of the columns is named "sum.taxonomy"
if (!("sum.taxonomy" %in% colnames(taxon_table))) {
stop("Please make sure that the taxonomy column in the input taxon table is named 'sum.taxonomy'!")
}
# 3. The "xxx_seq_number" column, if it ever existed, is removed
if (any(stringr::str_detect(colnames(taxon_table), "seq_number"))) {
stop("Please makes sure that you have removed the 'xxx_seq_number' column from the taxon table (note: this can be done with the function `scrub_seqNum_column`)")
}
# 4. All columns apart from sum.taxonomy should be numeric
if (!(all(sapply(taxon_table %>% dplyr::select(-sum.taxonomy), is.numeric)))) {
stop("Please make sure that all columns apart from sum.taxonomy only contain numeric data!")
}
# 5. All columns apart from sum.taxonomy should have corresponding row in metadata file
if (!(all(colnames(taxon_table %>% dplyr::select(-sum.taxonomy)) %in% metadata_file[, 1]))) {
stop("Please make sure that each sample in your taxon table has a corresponding row in the mapping file!")
}
}
#' Takes a site-abundance table from Anacapa, and summarizes to each unique taxon in the sum.taxonomy column
#' @param taxon_table OTU table from Anacapa
#' @author Gaurav Kandlikar
#' @examples
#' good_taxon_table <- data.frame(sum.taxonomy = c("a;b;c;d;f;u", "p;q;r;s;t;u"),
#' site_1 = c(0,1), site_2 = c(10, 20))
#' group_anacapa_by_taxonomy(good_taxon_table)
#' @export
group_anacapa_by_taxonomy <- function(taxon_table) {
# If tables were made in New Anacapa (with Domain), get rid of domain...
if(stringr::str_count(taxon_table$sum.taxonomy, ";")[1] == 7) {
taxon_table$sum.taxonomy = gsub(pattern = "^.*?;", replacement = "", x = taxon_table$sum.taxonomy)
}
taxon_table %>%
dplyr::filter(sum.taxonomy != "") %>%
dplyr::group_by(sum.taxonomy) %>%
dplyr::summarize_if(is.numeric, sum) %>%
dplyr::mutate(sum.taxonomy = as.character(sum.taxonomy)) %>%
data.frame
}
#' Takes an site-abundance table from Anacapa, along with a qiime-style mapping file, and returns a phyloseq object
#' @param taxon_table Taxon table in the anacapa format
#' @param metadata_file Metadata file with rows as sites, columns as variables
#' @return phyloseq class object
#' @author Gaurav Kandlikar
#' @examples
#' good_taxon_table <- data.frame(sum.taxonomy = c("a;b;c;d;f;u", "p;q;r;s;t;u"),
#' site_1 = c(0,1), site_2 = c(10, 20))
#' good_maps <- data.frame(site = c("site_1", "site_2"), season = c("wet", "dry"),
#'  host = c("oak", "sage"))
#' convert_anacapa_to_phyloseq(good_taxon_table, good_maps)
#' @export
convert_anacapa_to_phyloseq <- function(taxon_table, metadata_file) {
# Validate the files
validate_input_files(taxon_table, metadata_file)
# Group the anacapa ouptut by taxonomy, if it has not yet happened, and turn it into a matrix
taxon_table2 <- group_anacapa_by_taxonomy(taxon_table) %>%
tibble::column_to_rownames("sum.taxonomy") %>%
as.matrix
# Reorder the columns (sites) for ease of displaying later
taxon_table2 <- taxon_table2[ , order(colnames(taxon_table2))]
# Convert the matrix into a phyloseq otu_table object, with taxa as the rows
ana_taxon_table_physeq <- phyloseq::otu_table(taxon_table2, taxa_are_rows = TRUE)
# Extract the rownames of the matrix above- this has the full taxonomic path.
# Split the taxonomic path on semicolons, and turn the resulting matrix into
# a phyloseq tax_table object
taxon_names <- reshape2::colsplit(rownames(taxon_table2), ";",
names = c("Domain","Phylum","Class","Order","Family","Genus","Species")) %>%
as.matrix
rownames(taxon_names) <- rownames(taxon_table2)
tax_physeq <- phyloseq::tax_table(taxon_names)
colnames(tax_physeq) <- c("Domain","Phylum","Class","Order","Family","Genus","Species")
# Make a phyloseq object out of the otu_table and the tax_table objects
physeq_object <- phyloseq::phyloseq(ana_taxon_table_physeq, tax_physeq)
# Make sure the mapping file (ie the site metadata) is ordered according to site name
rownames(metadata_file) <- metadata_file[, 1]
metadata_file <- metadata_file[order(metadata_file[, 1]), ]
# Convert the mapping file into a phyloseq sample_data object, and merge it with the
# phyloseq object created above to make a phyloseq object with otu table, tax table, and sample data.
sampledata <- phyloseq::sample_data(metadata_file)
phyloseq::merge_phyloseq(physeq_object, sampledata)
}
#' Takes a phyloseq object with an otu_table object and returns a vegan style community matrix.
#' @param physeq_object phyloseq object with an otu_table object within
#' @return vegan-style community matrix
#' @examples
#' good_taxon_table <- data.frame(sum.taxonomy = c("a;b;c;d;f;u", "p;q;r;s;t;u"),
#' site_1 = c(0,1), site_2 = c(10, 20))
#' good_maps <- data.frame(site = c("site_1", "site_2"), season = c("wet", "dry"),
#' host = c("oak", "sage"))
#' physeq_object <- convert_anacapa_to_phyloseq(good_taxon_table, good_maps)
#' vegan_otu(physeq_object)
#' @export
vegan_otu <- function(physeq_object) {
OTU <- phyloseq::otu_table(physeq_object)
if (phyloseq::taxa_are_rows(OTU)) {
OTU <- t(OTU)
}
return(methods::as(OTU, "matrix"))
}
#' Remove "xxx_seq_number" column from ana_taxon_table file if it exists
#' takes one taxon table as its input, and if it include
#' a column named "xxx_seq_number", it gets rid of that column - it's not of use to us
#' any longer
#'
#' @param taxon_table taxonomy table from Anacapa
#' @return ana_taxon_table file, with "xxx_seq_number" column removed (if it existed)
#' @examples
#' good_taxon_table <- data.frame(seq_number = c(1,2),
#' sum.taxonomy = c("a;b;c;d;f;u", "p;q;r;s;t;u"),
#' site_1 = c(0,1), site_2 = c(10, 20))
#' scrub_seqNum_column(good_taxon_table)
#' @export
scrub_seqNum_column <- function(taxon_table) {
to_return <- taxon_table %>% dplyr::select(-dplyr::matches("seq_number"))
return(to_return)
}
#' Replace empty calls in Anacapa taxonomy tables with Unknown
#' (that is what they effectively are to most users)
#' @param taxon_table taxonomy table from Anacapa
#' @return ana_taxon_table with scrubbed 'sum.taxonomy' column
#' @examples
#' good_taxon_table <- data.frame(sum.taxonomy = c("a;b;c;d;f;u", "p;q;r;s;t;u"),
#' site_1 = c(0,1), site_2 = c(10, 20))
#' scrub_taxon_paths(good_taxon_table)
#' @export
scrub_taxon_paths <- function(taxon_table) {
to_return <- taxon_table
new_sum_tax <- reshape2::colsplit(taxon_table$sum.taxonomy, ";",
names = c("Domain","Phylum", "Class", "Order", "Family", "Genus", "Species"))
new_sum_tax <- new_sum_tax %>%
dplyr::mutate(Domain = ifelse(is.na(Domain) | Domain == "", "unknown", Domain)) %>%
dplyr::mutate(Phylum = ifelse(is.na(Phylum) | Phylum == "", "unknown", Phylum)) %>%
dplyr::mutate(Class = ifelse(is.na(Class) | Class == "", "unknown", Class)) %>%
dplyr::mutate(Order = ifelse(is.na(Order) | Order == "", "unknown", Order)) %>%
dplyr::mutate(Family = ifelse(is.na(Family) | Family == "", "unknown", Family)) %>%
dplyr::mutate(Genus = ifelse(is.na(Genus) | Genus == "", "unknown", Genus)) %>%
dplyr::mutate(Species = ifelse(is.na(Species)| Species == "", "unknown", Species))
new_sum_tax2 <- paste(new_sum_tax$Domain,
new_sum_tax$Phylum,
new_sum_tax$Class,
new_sum_tax$Order,
new_sum_tax$Family,
new_sum_tax$Genus,
new_sum_tax$Species, sep = ";")
to_return$sum.taxonomy <- new_sum_tax2
return(to_return)
}
#' Verify that the input taxon_table file and the input mapping file meets specificationss
#' The function takes one taxon table as its input, and verfies that it meets
#' the expected standards.
#' The standards incude:
#' 1. Column names exist.
#' 2. One of the columns is named "sum.taxonomy"
#' 3. The "xxx_seq_number" column, if it ever existed, is removed
#' 4. All columns apart from sum.taxonomy should be numeric
#' 5. All columns apart from sum.taxonomy should have corresponding row in metadata file
#' @param taxon_table taxonomy table from Anacapa
#' @param metadata_file Qiime-style mapping
#' @examples
#' good_taxon_table <- data.frame(sum.taxonomy = c("a;b;c;d;f;u", "p;q;r;s;t;u"),
#' site_1 = c(0,1), site_2 = c(10, 20))
#' good_maps <- data.frame(site = c("site_1", "site_2"),
#' season = c("wet", "dry"), host = c("oak", "sage"))
#' validate_input_files(good_taxon_table, good_maps)
#' @export
validate_input_files <- function(taxon_table, metadata_file) {
# 1. Column names exist.
if (is.null(colnames(taxon_table))) {
stop("The input taxon table should have column names. The taxonomy column should be named 'sum.taxonomy'; the rest of the columns should be named according to their sample names.")
}
# 2. One of the columns is named "sum.taxonomy"
if (!("sum.taxonomy" %in% colnames(taxon_table))) {
stop("Please make sure that the taxonomy column in the input taxon table is named 'sum.taxonomy'!")
}
# 3. The "xxx_seq_number" column, if it ever existed, is removed
if (any(stringr::str_detect(colnames(taxon_table), "seq_number"))) {
stop("Please makes sure that you have removed the 'xxx_seq_number' column from the taxon table (note: this can be done with the function `scrub_seqNum_column`)")
}
# 4. All columns apart from sum.taxonomy should be numeric
if (!(all(sapply(taxon_table %>% dplyr::select(-sum.taxonomy), is.numeric)))) {
stop("Please make sure that all columns apart from sum.taxonomy only contain numeric data!")
}
# 5. All columns apart from sum.taxonomy should have corresponding row in metadata file
if (!(all(colnames(taxon_table %>% dplyr::select(-sum.taxonomy)) %in% metadata_file[, 1]))) {
stop("Please make sure that each sample in your taxon table has a corresponding row in the mapping file!")
}
}
here("decontam","ASV.nested_final.RDS")
library (tidyverse)
library (vegan)
library (proxy)
library(reshape2)
library(microDecon)
library(stringr)
library(knitr)
library(ranacapa)
library(dplyr)
library(tibble)
library(reshape2)
library(phyloseq)
library(ggplot2)
library(plotly)
library(optparse)
library(fitdistrplus)
library(rstan)
library(shinystan)
library(bayesplot)
library(broom)
library(analyze.stuff)
library(here)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
source(here("decontam","decontamination_utilities.R"))
working_directory <- here("decontam")
#Paths to Files
input_anacapa_path_1 <- "data/fishcard_12S_all_ASV_raw_taxonomy_60_edited.txt"
input_meta_path <- "data/mpa_metadata_02042020.txt"
input_c19_hashes <- "data/c19_hashes_11102020.txt"
number_anacapa_tables <- "one"
read_type <- "merged_only"
low_dist_probability_cutoff <- 0.025
minimum_read_cutoff <- 1000
step3_runs <- 2
step3_thresh <- 0.7
step3_prop.thresh <- 5e-05
step3_regression <- 0
som_level <- "double"
som_chains<-10
som_iterations<-1000
som_filter_choice <- "som_min_threshold_3"
max_dist_probability_cutoff <- 0.99
c19_hashes <- read.table(here(input_c19_hashes), header = TRUE, sep = "\t", stringsAsFactors = F)
metadata <- read.table(here(input_meta_path), header = TRUE, sep = "\t", stringsAsFactors = F)
anacapa_table_1 <- read.table(input_anacapa_path_1, header = 1, sep = "\t", stringsAsFactors = F)
#Generate Hash.key
anacapa_table_1 %>%
dplyr::select(seq_number, sum.taxonomy) -> hash.key
cbind(hash.key, c19_hashes) %>%
mutate(., mammal = str_detect(sum.taxonomy.c19,"Mammalia")) %>%
mutate(., bird = str_detect(sum.taxonomy.c19,"Aves")) %>%
mutate(., sum.taxonomy_final = case_when(mammal==TRUE ~ sum.taxonomy.c19,
bird==TRUE ~ sum.taxonomy.c19,
TRUE ~ sum.taxonomy)) %>%
dplyr::select(seq_number,sum.taxonomy =sum.taxonomy_final) -> hash.key
saveRDS(hash.key, here("decontam","Output_R","hash.key.RDS"))
#Format Anacapa Table 1
anacapa_table_1 %>%
filter(., str_detect(seq_number,"merged")) %>%
dplyr::select(seq_number) -> merged_hash_1
merged_hash_1$seq_number[[1]] %>% str_remove(.,"merged_") %>% str_sub(., end=-3) -> barcode_1
anacapa_table_1$Miseq_run <- barcode_1
###Fix Names
anacapa_table_1_names <- colnames(anacapa_table_1)
anacapa_table_1_names %>% as.data.frame() -> anacapa_table_1_names
colnames(anacapa_table_1_names) <- c("Seq_number")
left_join(anacapa_table_1_names, metadata) %>% dplyr::select(Seq_number, New_name) %>%
mutate(final_names = coalesce(New_name, Seq_number)) %>%  dplyr::select(final_names) %>% as.list() -> anacapa_table_1_names
colnames(anacapa_table_1) <- anacapa_table_1_names$final_names
#Merge All Tables
ASV.table <- anacapa_table_1
ASV.table %>%
replace(is.na(.), 0) ->ASV.table
###Format for Long Data
ASV.table$seq_number <- factor(ASV.table$seq_number)
ASV.table$Miseq_run <- factor(ASV.table$Miseq_run)
columns <- colnames(ASV.table)
remove <- c("seq_number","sum.taxonomy","Miseq_run")
gathercols <-  columns[! columns %in% remove]
ASV.table %>%
pivot_longer(., cols=gathercols, names_to="sample", values_to="reads") -> ASV.table_long
ASV.table_long$reads <- as.numeric(ASV.table_long$reads)
saveRDS(ASV.table_long, file=here("decontam","ASV.table_long_mpa.RDS"))
